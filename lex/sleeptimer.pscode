DEEP_SLEEP_MAX_ACTIVITY = 0.1
LIGHT_SLEEP_MAX_ACTIVITY = 0.3
SLEEP_PHONE_MAX_ACTIVITY = 0
DEEP_SLEEP_MAX_HEARTRATE = 50
LIGHT_SLEEP_MAX_HEARTRATE = 70
SLEEP_PERIOD_START_HOUR = 22
SLEEP_PERIOD_END_HOUR = 9
EXEC_FREQ_SECONDS = 10

LAST_STATE = "awake"
CURRENT_STATE = "awake"

STATE_CHANGE = false

# solution A
SLEEP_LOG = ["deepsleep":0,"lightsleep":0,"awake":0]     // KVS: key value stores 

# solution B
DEEP_SLEEP_SECONDS = 0
LIGHT_SLEEP_SECONDS = 0
AWAKE_SECONDS = 0


function Measure() do
	if Smartphone.time.getHour()<SLEEP_PERIOD_END_HOUR AND Smartphone.time.getHour()>SLEEP_PERIOD_START_HOUR then 
		if Smartphone.getActivity() <= SLEEP_PHONE_MAX_ACTIVITY then
			HR = Wristband.getHeartRate()
			MV = Wristband.getMovement()
			if MV <= DEEP_SLEEP_MAX_ACTIVITY AND HR <= DEEP_SLEEP_MAX_HEARTRATE then
				CURRENT_STATE = "deepsleep"
			else if MV <= LIGHT_SLEEP_MAX_ACTIVITY AND HR <= LIGHT_SLEEP_MAX_HEARTRATE then
				CURRENT_STATE = "lightsleep"
			else
				CURRENT_STATE = "awake"
			endif
		else
			CURRENT_STATE = "awake"
		endif
        # solution A
		SLEEP_LOG[CURRENT_STATE] = SLEEP_LOG[CURRENT_STATE] + EXEC_FREQ_SECONDS
		# solution B
		if CURRENT_STATE = "deepsleep" then
			DEEP_SLEEP_SECONDS = DEEP_SLEEP_SECONDS + EXEC_FREQ_SECONDS
		else if CURRENT_STATE = "lightsleep" then
			LIGHT_SLEEP_MAX_ACTIVITY = LIGHT_SLEEP_SECONDS + EXEC_FREQ_SECONDS
		else if CURRENT_STATE = "awake" then
			AWAKE_SECONDS = AWAKE_SECONDS + EXEC_FREQ_SECONDS
		endif
		# solution B/2
		switch CURRENT_STATE
			case "deepsleep":
				DEEP_SLEEP_SECONDS = DEEP_SLEEP_SECONDS + EXEC_FREQ_SECONDS
				break switch
			case "lightsleep":
				LIGHT_SLEEP_MAX_ACTIVITY = LIGHT_SLEEP_SECONDS + EXEC_FREQ_SECONDS
				break switch
			case "awake":
				AWAKE_SECONDS = AWAKE_SECONDS + EXEC_FREQ_SECONDS
				break switch
			default:
				print "WHAT THE EFF MAN?!"
		endswitch

        if CURRENT_STATE != LAST_STATE then
            STATE_CHANGE = true
        endif
        
		LAST_STATE = CURRENT_STATE                    // LAST_STATE carries state over to the next iteration
	endif
done

loop while true
	wait(EXEC_FREQ_SECONDS) // other way of writing: sleep(EXEC_FREQ_SECONDS) --> amount of time to wait before executing the code below /Measure()/ =>
	Measure()                // => sleep is measured every EXEC_FREQ_SECONDS (= 10 seconds)
    if STATE_CHANGE = true then
        if CURRENT_STATE = "deepsleep" then
            Graph()                           //calling a function that graphs duration of sleep (+ should use some sort of argument that'd determine what type of sleep graph /eg color/ it'd be)
        else if CURRENT_STATE = "lightsleep" then
            Graph()
        else 
            Graph()
        endif
    endif 
endloop

// + you can check transitions /state changes/ <- hw
